Procedure {
  name: wain
  return_type: int
  parameters: 
    arr: int* (used)
    size: int (used)
  declarations: 
    idx: int = 0 (used)
  statements: 
    ExprStatement {
      AssignmentExpr {
        lhs: 
          VariableLValueExpr(arr) : int*
        rhs: 
          NewExpr {
            VariableExpr(size) : int
          } : int*
      } : int*
    }
    ExprStatement {
      AssignmentExpr {
        lhs: 
          VariableLValueExpr(idx) : int
        rhs: 
          0: int
      } : int
    }
    WhileStatement {
      condition: 
        BinaryExpr {
          lhs: 
            VariableExpr(idx) : int
          operation: LessThan
          rhs: 
            VariableExpr(size) : int
        } : int
      body: 
        ExprStatement {
          AssignmentExpr {
            lhs: 
              DereferenceLValueExpr {
                BinaryExpr {
                  lhs: 
                    VariableExpr(arr) : int*
                  operation: Add
                  rhs: 
                    VariableExpr(idx) : int
                } : int*
              } : int
            rhs: 
              BinaryExpr {
                lhs: 
                  VariableExpr(idx) : int
                operation: Mul
                rhs: 
                  VariableExpr(idx) : int
              } : int
          } : int
        }
        ExprStatement {
          AssignmentExpr {
            lhs: 
              VariableLValueExpr(idx) : int
            rhs: 
              BinaryExpr {
                lhs: 
                  VariableExpr(idx) : int
                operation: Add
                rhs: 
                  1: int
              } : int
          } : int
        }
    }
    ExprStatement {
      AssignmentExpr {
        lhs: 
          VariableLValueExpr(idx) : int
        rhs: 
          0: int
      } : int
    }
    WhileStatement {
      condition: 
        BinaryExpr {
          lhs: 
            VariableExpr(idx) : int
          operation: LessThan
          rhs: 
            VariableExpr(size) : int
        } : int
      body: 
        PrintStatement {
          DereferenceExpr {
            BinaryExpr {
              lhs: 
                VariableExpr(arr) : int*
              operation: Add
              rhs: 
                VariableExpr(idx) : int
            } : int*
          } : int
        }
        ExprStatement {
          AssignmentExpr {
            lhs: 
              VariableLValueExpr(idx) : int
            rhs: 
              BinaryExpr {
                lhs: 
                  VariableExpr(idx) : int
                operation: Add
                rhs: 
                  1: int
              } : int
          } : int
        }
    }
    DeleteStatement {
      VariableExpr(arr) : int*
    }
  return_expr: 
    0: int
}

