procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT
INT int
ID a
COMMA ,
dcl type ID
type INT
INT int
ID b
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID c
BECOMES =
NUM 5
SEMI ;
dcl type ID
type INT
INT int
ID d
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements .EMPTY
statement IF LPAREN expr RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test test LT sum
test sum
sum term
term factor
factor ID
ID a
LT <
sum term
term factor
factor ID
ID b
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement IF LPAREN expr RPAREN LBRACE statements RBRACE
IF if
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test test GT sum
test sum
sum term
term factor
factor ID
ID b
GT >
sum term
term factor
factor ID
ID a
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID c
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum MINUS term
sum term
term factor
factor NUM
NUM 0
MINUS -
term factor
factor NUM
NUM 5
SEMI ;
RBRACE }
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID a
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum MINUS term
sum term
term factor
factor ID
ID d
MINUS -
term factor
factor ID
ID c
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID a
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum MINUS term
sum term
term factor
factor ID
ID c
MINUS -
term factor
factor ID
ID d
SEMI ;
RBRACE }
RETURN return
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor ID
ID a
SEMI ;
RBRACE }
