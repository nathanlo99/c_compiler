Procedure {
  name: wain
  return_type: int
  parameters: 
    arr: int* (used)
    length: int (used)
  declarations: 
    idx: int = 0 (used)
    sum: int = 0 (used)
  statements: 
    WhileStatement {
      condition: 
        BinaryExpr {
          lhs: 
            VariableExpr(idx) : int
          operation: LessThan
          rhs: 
            VariableExpr(length) : int
        } : int
      body: 
        PrintStatement {
          DereferenceExpr {
            BinaryExpr {
              lhs: 
                VariableExpr(arr) : int*
              operation: Add
              rhs: 
                VariableExpr(idx) : int
            } : int*
          } : int
        }
        ExprStatement {
          AssignmentExpr {
            lhs: 
              VariableLValueExpr(sum) : int
            rhs: 
              BinaryExpr {
                lhs: 
                  VariableExpr(sum) : int
                operation: Add
                rhs: 
                  DereferenceExpr {
                    BinaryExpr {
                      lhs: 
                        VariableExpr(arr) : int*
                      operation: Add
                      rhs: 
                        VariableExpr(idx) : int
                    } : int*
                  } : int
              } : int
          } : int
        }
        ExprStatement {
          AssignmentExpr {
            lhs: 
              VariableLValueExpr(idx) : int
            rhs: 
              BinaryExpr {
                lhs: 
                  VariableExpr(idx) : int
                operation: Add
                rhs: 
                  1: int
              } : int
          } : int
        }
    }
  return_expr: 
    VariableExpr(sum) : int
}

