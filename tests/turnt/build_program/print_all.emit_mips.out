                                ; // Simplified C code:
                                ; int wain(int* arr, int length) {
                                ;   int idx = 0;
                                ;   int sum = 0;
                                ;   while (idx < length) {
                                ;     println(*(arr + idx));
                                ;     sum = (sum + *(arr + idx));
                                ;     idx = (idx + 1);
                                ;   }
                                ;   return sum;
                                ; }
                                ; 
.import print
lis $10
.word print
lis $4
.word 4
slt $11, $0, $4                 ; $11 = ($0 < $4) = 1
beq $0, $0, wain                ; Done prologue, jumping to wain
                                ; 
                                ; Generating code for wain
wain:
sw $1, -4($30)                  ;   push $1
sub $30, $30, $4                ;   ^
sw $2, -4($30)                  ;   push $2
sub $30, $30, $4                ;   ^
sub $29, $30, $4
sw $0, -4($30)                  ;   push $0
sub $30, $30, $4                ; Declaration idx
sw $0, -4($30)                  ;   push $0
sub $30, $30, $4                ; Declaration sum
                                ; Code for statements:
whileloop0:
lw $3, 0($29)                   ; Loading idx
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 4($29)                   ; Loading length
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $5, $3
beq $3, $0, whileend0
lw $3, 8($29)                   ; Loading arr
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 0($29)                   ; Loading idx
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
mult $3, $4
mflo $3
add $3, $5, $3
lw $3, 0($3)
add $1, $3, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word print
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
                                ; sum = (sum + *(arr + idx));

lw $3, -4($29)                  ; Loading sum
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 8($29)                   ; Loading arr
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 0($29)                   ; Loading idx
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
mult $3, $4
mflo $3
add $3, $5, $3
lw $3, 0($3)
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, -4($29)
                                ; idx = (idx + 1);

lw $3, 0($29)                   ; Loading idx
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, 0($29)
beq $0, $0, whileloop0
whileend0:
                                ; Code for return value:
lw $3, -4($29)                  ; Loading sum
jr $31                          ; Done generating code for wain
                                ; Number of assembly instructions: 70
