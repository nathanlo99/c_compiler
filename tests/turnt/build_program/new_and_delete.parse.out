procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT STAR
INT int
STAR *
ID arr
COMMA ,
dcl type ID
type INT
INT int
ID size
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID idx
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID arr
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor NEW INT LBRACK expr RBRACK
NEW new
INT int
LBRACK [
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor ID
ID size
RBRACK ]
SEMI ;
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
statement WHILE LPAREN expr RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test test LT sum
test sum
sum term
term factor
factor ID
ID idx
LT <
sum term
term factor
factor ID
ID size
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID arr
PLUS +
term factor
factor ID
ID idx
RPAREN )
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term term STAR factor
term factor
factor ID
ID idx
STAR *
factor ID
ID idx
SEMI ;
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID idx
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
statement WHILE LPAREN expr RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test test LT sum
test sum
sum term
term factor
factor ID
ID idx
LT <
sum term
term factor
factor ID
ID size
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID arr
PLUS +
term factor
factor ID
ID idx
RPAREN )
RPAREN )
SEMI ;
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID idx
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
statement DELETE LBRACK RBRACK expr SEMI
DELETE delete
LBRACK [
RBRACK ]
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor ID
ID arr
SEMI ;
RETURN return
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
