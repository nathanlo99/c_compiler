                                ; // Simplified C code:
                                ; int isPrime(int n) {
                                ;   int i = 2;
                                ;   int answer = 1;
                                ;   int continueLooping = 1;
                                ;   if (3 < n) {
                                ;   } else {
                                ;     continueLooping = 0;
                                ;   }
                                ;   while (continueLooping != 0) {
                                ;     if ((n % i) == 0) {
                                ;       answer = 0;
                                ;     }
                                ;     i = (i + 1);
                                ;     if (n < (i * i)) {
                                ;       continueLooping = 0;
                                ;     } else {
                                ;       if (answer == 0) {
                                ;         continueLooping = 0;
                                ;       }
                                ;     }
                                ;   }
                                ;   return answer;
                                ; }
                                ; 
                                ; int collatz(int* num) {
                                ;   int value = 0;
                                ;   value = *num;
                                ;   if (value < 2) {
                                ;     *num = 1;
                                ;   } else {
                                ;     if ((value % 2) == 0) {
                                ;       *num = (value / 2);
                                ;     } else {
                                ;       *num = (((3 * value) + 2) - 1);
                                ;     }
                                ;   }
                                ;   return 0;
                                ; }
                                ; 
                                ; int wain(int startNumber, int numPrimes) {
                                ;   int* result = NULL;
                                ;   int idx = 0;
                                ;   int nextNumber = 0;
                                ;   result = new int[numPrimes];
                                ;   nextNumber = startNumber;
                                ;   while (idx < numPrimes) {
                                ;     while (isPrime(nextNumber) == 0) {
                                ;       nextNumber = (nextNumber + 1);
                                ;     }
                                ;     *(result + idx) = nextNumber;
                                ;     nextNumber = (nextNumber + 1);
                                ;     idx = (idx + 1);
                                ;   }
                                ;   idx = 0;
                                ;   while (idx < numPrimes) {
                                ;     println(*(result + idx));
                                ;     idx = (idx + 1);
                                ;   }
                                ;   nextNumber = 40;
                                ;   while (nextNumber != 1) {
                                ;     println(nextNumber);
                                ;     idx = collatz(&nextNumber);
                                ;   }
                                ;   delete[] result;
                                ;   return 0;
                                ; }
                                ; 
.import init
.import new
.import delete
.import print
lis $10
.word print
lis $4
.word 4
slt $11, $0, $4                 ; $11 = ($0 < $4) = 1
beq $0, $0, wain                ; Done prologue, jumping to wain
                                ; 
                                ; Generating code for isPrime
isPrime:
sub $29, $30, $4
add $3, $11, $11
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ; Declaration i
sw $11, -4($30)                 ;   push $11
sub $30, $30, $4                ; Declaration answer
sw $11, -4($30)                 ;   push $11
sub $30, $30, $4                ; Declaration continueLooping
                                ; Code for statements:
sub $3, $4, $11                 ; Loading the literal 3
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 4($29)                   ; Loading n
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $5, $3
beq $3, $0, ifelse0
beq $0, $0, ifendif0
ifelse0:
                                ; continueLooping = 0;

add $3, $0, $0                  ; Loading the literal 0
sw $3, -8($29)
ifendif0:
whileloop0:
lw $3, -8($29)                  ; Loading continueLooping
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $0, $0                  ; Loading the literal 0
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
beq $3, $5, whileend0
lw $3, 4($29)                   ; Loading n
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 0($29)                   ; Loading i
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
div $5, $3
mfhi $3
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $0, $0                  ; Loading the literal 0
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
bne $3, $5, ifelse1
                                ; answer = 0;

add $3, $0, $0                  ; Loading the literal 0
sw $3, -4($29)
beq $0, $0, ifendif1
ifelse1:
ifendif1:
                                ; i = (i + 1);

lw $3, 0($29)                   ; Loading i
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, 0($29)
lw $3, 4($29)                   ; Loading n
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 0($29)                   ; Loading i
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 0($29)                   ; Loading i
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
mult $5, $3
mflo $3
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $5, $3
beq $3, $0, ifelse2
                                ; continueLooping = 0;

add $3, $0, $0                  ; Loading the literal 0
sw $3, -8($29)
beq $0, $0, ifendif2
ifelse2:
lw $3, -4($29)                  ; Loading answer
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $0, $0                  ; Loading the literal 0
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
bne $3, $5, ifelse3
                                ; continueLooping = 0;

add $3, $0, $0                  ; Loading the literal 0
sw $3, -8($29)
beq $0, $0, ifendif3
ifelse3:
ifendif3:
ifendif2:
beq $0, $0, whileloop0
whileend0:
                                ; Code for return value:
lw $3, -4($29)                  ; Loading answer
                                ; Done evaluating result, popping decls and saved registers
add $30, $30, $4
add $30, $30, $4
add $30, $30, $4
jr $31                          ; Done generating code for isPrime
                                ; 
                                ; Generating code for collatz
collatz:
sub $29, $30, $4
sw $0, -4($30)                  ;   push $0
sub $30, $30, $4                ; Declaration value
                                ; Code for statements:
                                ; value = *num;

lw $3, 4($29)                   ; Loading num
lw $3, 0($3)
sw $3, 0($29)
lw $3, 0($29)                   ; Loading value
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $11                ; Loading the literal 2
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $5, $3
beq $3, $0, ifelse4
                                ; *num = 1;

lw $3, 4($29)                   ; Loading num
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
sw $3, 0($5)
beq $0, $0, ifendif4
ifelse4:
lw $3, 0($29)                   ; Loading value
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $11                ; Loading the literal 2
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
div $5, $3
mfhi $3
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $0, $0                  ; Loading the literal 0
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
bne $3, $5, ifelse5
                                ; *num = (value / 2);

lw $3, 4($29)                   ; Loading num
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 0($29)                   ; Loading value
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $11                ; Loading the literal 2
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
div $5, $3
mflo $3
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
sw $3, 0($5)
beq $0, $0, ifendif5
ifelse5:
                                ; *num = (((3 * value) + 2) - 1);

lw $3, 4($29)                   ; Loading num
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
sub $3, $4, $11                 ; Loading the literal 3
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 0($29)                   ; Loading value
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
mult $5, $3
mflo $3
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $11                ; Loading the literal 2
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
sub $3, $5, $3
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
sw $3, 0($5)
ifendif5:
ifendif4:
                                ; Code for return value:
add $3, $0, $0                  ; Loading the literal 0
                                ; Done evaluating result, popping decls and saved registers
add $30, $30, $4
jr $31                          ; Done generating code for collatz
                                ; 
                                ; Generating code for wain
wain:
sw $1, -4($30)                  ;   push $1
sub $30, $30, $4                ;   ^
sw $2, -4($30)                  ;   push $2
sub $30, $30, $4                ;   ^
                                ; Calling init
add $2, $0, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word init
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
                                ; Done calling init
sub $29, $30, $4
sw $11, -4($30)                 ;   push $11
sub $30, $30, $4                ; Declaration result
sw $0, -4($30)                  ;   push $0
sub $30, $30, $4                ; Declaration idx
sw $0, -4($30)                  ;   push $0
sub $30, $30, $4                ; Declaration nextNumber
                                ; Code for statements:
                                ; result = new int[numPrimes];

lw $3, 4($29)                   ; Loading numPrimes
add $1, $3, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word new
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
bne $3, $0, 1
add $3, $11, $0
sw $3, 0($29)
                                ; nextNumber = startNumber;

lw $3, 8($29)                   ; Loading startNumber
sw $3, -8($29)
whileloop1:
lw $3, -4($29)                  ; Loading idx
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 4($29)                   ; Loading numPrimes
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $5, $3
beq $3, $0, whileend1
whileloop2:
sw $29, -4($30)                 ;   push $29
sub $30, $30, $4                ;   ^
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
                                ; Pushing argument n
lw $3, -8($29)                  ; Loading nextNumber
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
                                ; Done pushing argument n
lis $5
.word isPrime
jalr $5
add $30, $30, $4
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
add $30, $30, $4                ;   pop $29
lw $29, -4($30)                 ;   ^
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $0, $0                  ; Loading the literal 0
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
bne $3, $5, whileend2
                                ; nextNumber = (nextNumber + 1);

lw $3, -8($29)                  ; Loading nextNumber
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, -8($29)
beq $0, $0, whileloop2
whileend2:
                                ; *(result + idx) = nextNumber;

lw $3, 0($29)                   ; Loading result
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, -4($29)                  ; Loading idx
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
mult $3, $4
mflo $3
add $3, $5, $3
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, -8($29)                  ; Loading nextNumber
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
sw $3, 0($5)
                                ; nextNumber = (nextNumber + 1);

lw $3, -8($29)                  ; Loading nextNumber
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, -8($29)
                                ; idx = (idx + 1);

lw $3, -4($29)                  ; Loading idx
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, -4($29)
beq $0, $0, whileloop1
whileend1:
                                ; idx = 0;

add $3, $0, $0                  ; Loading the literal 0
sw $3, -4($29)
whileloop3:
lw $3, -4($29)                  ; Loading idx
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 4($29)                   ; Loading numPrimes
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $5, $3
beq $3, $0, whileend3
lw $3, 0($29)                   ; Loading result
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, -4($29)                  ; Loading idx
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
mult $3, $4
mflo $3
add $3, $5, $3
lw $3, 0($3)
add $1, $3, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word print
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
                                ; idx = (idx + 1);

lw $3, -4($29)                  ; Loading idx
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, -4($29)
beq $0, $0, whileloop3
whileend3:
                                ; nextNumber = 40;

lis $3
.word 40                        ; Loading the literal 40
sw $3, -8($29)
whileloop4:
lw $3, -8($29)                  ; Loading nextNumber
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
beq $3, $5, whileend4
lw $3, -8($29)                  ; Loading nextNumber
add $1, $3, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word print
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
                                ; idx = collatz(&nextNumber);

sw $29, -4($30)                 ;   push $29
sub $30, $30, $4                ;   ^
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
                                ; Pushing argument num
lis $3
.word -8
add $3, $3, $29
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
                                ; Done pushing argument num
lis $5
.word collatz
jalr $5
add $30, $30, $4
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
add $30, $30, $4                ;   pop $29
lw $29, -4($30)                 ;   ^
sw $3, -4($29)
beq $0, $0, whileloop4
whileend4:
lw $3, 0($29)                   ; Loading result
beq $3, $11, deleteskip0
add $1, $3, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word delete
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
deleteskip0:
                                ; Code for return value:
add $3, $0, $0                  ; Loading the literal 0
jr $31                          ; Done generating code for wain
                                ; Number of assembly instructions: 365
