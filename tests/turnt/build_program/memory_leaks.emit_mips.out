                                ; // Simplified C code:
                                ; int wain(int a, int b) {
                                ;   int i = 0;
                                ;   int* ptr = NULL;
                                ;   while (i < a) {
                                ;     ptr = new int[b];
                                ;     i = (i + 1);
                                ;   }
                                ;   return 0;
                                ; }
                                ; 
.import init
.import new
.import delete
lis $4
.word 4
slt $11, $0, $4                 ; $11 = ($0 < $4) = 1
beq $0, $0, wain                ; Done prologue, jumping to wain
                                ; 
                                ; Generating code for wain
wain:
sw $1, -4($30)                  ;   push $1
sub $30, $30, $4                ;   ^
sw $2, -4($30)                  ;   push $2
sub $30, $30, $4                ;   ^
                                ; Calling init
add $2, $0, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word init
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
                                ; Done calling init
sub $29, $30, $4
sw $0, -4($30)                  ;   push $0
sub $30, $30, $4                ; Declaration i
sw $11, -4($30)                 ;   push $11
sub $30, $30, $4                ; Declaration ptr
                                ; Code for statements:
whileloop0:
lw $3, 0($29)                   ; Loading i
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 8($29)                   ; Loading a
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $5, $3
beq $3, $0, whileend0
                                ; ptr = new int[b];

lw $3, 4($29)                   ; Loading b
add $1, $3, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word new
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
bne $3, $0, 1
add $3, $11, $0
sw $3, -4($29)
                                ; i = (i + 1);

lw $3, 0($29)                   ; Loading i
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
add $3, $11, $0                 ; Loading the literal 1
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
add $3, $5, $3
sw $3, 0($29)
beq $0, $0, whileloop0
whileend0:
                                ; Code for return value:
add $3, $0, $0                  ; Loading the literal 0
jr $31                          ; Done generating code for wain
                                ; Number of assembly instructions: 55
