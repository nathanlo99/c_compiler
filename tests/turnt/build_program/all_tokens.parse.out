procedures procedure procedures
procedure type ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
type INT
INT int
ID isPrime
LPAREN (
params paramlist
paramlist dcl
dcl type ID
type INT
INT int
ID n
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID i
BECOMES =
NUM 2
SEMI ;
dcl type ID
type INT
INT int
ID answer
BECOMES =
NUM 1
SEMI ;
dcl type ID
type INT
INT int
ID cont
BECOMES =
NUM 1
SEMI ;
statements statements statement
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE
IF if
LPAREN (
test sum LE sum
sum term
term factor
factor ID
ID n
LE <=
sum term
term factor
factor NUM
NUM 3
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID cont
BECOMES =
expr test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test sum
sum term
term factor
factor ID
ID cont
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE
IF if
LPAREN (
test sum EQ sum
sum term
term term PCT factor
term factor
factor ID
ID n
PCT %
factor ID
ID i
EQ ==
sum term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID answer
BECOMES =
expr test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID i
BECOMES =
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID i
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test sum GT sum
sum term
term term STAR factor
term factor
factor ID
ID i
STAR *
factor ID
ID i
GT >
sum term
term factor
factor ID
ID n
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID cont
BECOMES =
expr test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE
IF if
LPAREN (
test sum EQ sum
sum term
term factor
factor ID
ID answer
EQ ==
sum term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID cont
BECOMES =
expr test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
RBRACE }
RBRACE }
RETURN return
expr test
test sum
sum term
term factor
factor ID
ID answer
SEMI ;
RBRACE }
procedures procedure procedures
procedure type ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
type INT
INT int
ID collatz
LPAREN (
params paramlist
paramlist dcl
dcl type ID
type INT STAR
INT int
STAR *
ID num
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID value
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID value
BECOMES =
expr test
test sum
sum term
term factor
factor STAR factor
STAR *
factor ID
ID num
SEMI ;
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test sum NE sum
sum term
term term PCT factor
term factor
factor ID
ID value
PCT %
factor NUM
NUM 2
NE !=
sum term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue STAR factor
STAR *
factor ID
ID num
BECOMES =
expr test
test sum
sum sum MINUS term
sum sum PLUS term
sum term
term term STAR factor
term factor
factor NUM
NUM 3
STAR *
factor ID
ID value
PLUS +
term factor
factor NUM
NUM 2
MINUS -
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue STAR factor
STAR *
factor ID
ID num
BECOMES =
expr test
test sum
sum term
term term SLASH factor
term factor
factor ID
ID value
SLASH /
factor NUM
NUM 2
SEMI ;
RBRACE }
RETURN return
expr test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT
INT int
ID startNumber
COMMA ,
dcl type ID
type INT
INT int
ID numPrimes
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NULL SEMI
dcls .EMPTY
dcl type ID
type INT STAR
INT int
STAR *
ID result
BECOMES =
NULL NULL
SEMI ;
dcl type ID
type INT
INT int
ID idx
BECOMES =
NUM 0
SEMI ;
dcl type ID
type INT
INT int
ID nextNumber
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID result
BECOMES =
expr test
test sum
sum term
term factor
factor NEW INT LBRACK expr RBRACK
NEW new
INT int
LBRACK [
expr test
test sum
sum term
term factor
factor ID
ID numPrimes
RBRACK ]
SEMI ;
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID nextNumber
BECOMES =
expr test
test sum
sum term
term factor
factor ID
ID startNumber
SEMI ;
statement FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statements RBRACE
FOR for
LPAREN (
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
expr test
test sum LT sum
sum term
term factor
factor ID
ID idx
LT <
sum term
term factor
factor ID
ID numPrimes
SEMI ;
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID idx
PLUS +
term factor
factor NUM
NUM 1
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test sum EQ sum
sum term
term factor
factor ID LPAREN arglist RPAREN
ID isPrime
LPAREN (
arglist expr
expr test
test sum
sum term
term factor
factor ID
ID nextNumber
RPAREN )
EQ ==
sum term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID nextNumber
BECOMES =
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID nextNumber
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
statement expr SEMI
expr lvalue BECOMES expr
lvalue STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID result
PLUS +
term factor
factor ID
ID idx
RPAREN )
BECOMES =
expr test
test sum
sum term
term factor
factor ID
ID nextNumber
SEMI ;
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID nextNumber
BECOMES =
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID nextNumber
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
statement FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statements RBRACE
FOR for
LPAREN (
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
expr test
test sum LT sum
sum term
term factor
factor ID
ID idx
LT <
sum term
term factor
factor ID
ID numPrimes
SEMI ;
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID idx
PLUS +
term factor
factor NUM
NUM 1
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr test
test sum
sum term
term factor
factor STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID result
PLUS +
term factor
factor ID
ID idx
RPAREN )
RPAREN )
SEMI ;
RBRACE }
statement FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statements RBRACE
FOR for
LPAREN (
expr lvalue BECOMES expr
lvalue ID
ID nextNumber
BECOMES =
expr test
test sum
sum term
term factor
factor NUM
NUM 40
SEMI ;
expr test
test sum NE sum
sum term
term factor
factor ID
ID nextNumber
NE !=
sum term
term factor
factor NUM
NUM 1
SEMI ;
expr test
test sum
sum term
term factor
factor ID LPAREN arglist RPAREN
ID collatz
LPAREN (
arglist expr
expr test
test sum
sum term
term factor
factor AMP lvalue
AMP &
lvalue ID
ID nextNumber
RPAREN )
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr test
test sum
sum term
term factor
factor ID
ID nextNumber
RPAREN )
SEMI ;
RBRACE }
statement DELETE LBRACK RBRACK expr SEMI
DELETE delete
LBRACK [
RBRACK ]
expr test
test sum
sum term
term factor
factor ID
ID result
SEMI ;
RETURN return
expr test
test sum
sum term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
