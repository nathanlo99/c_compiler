procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID isPrime
LPAREN (
params paramlist
paramlist dcl
dcl type ID
type INT
INT int
ID n
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID i
BECOMES =
NUM 2
SEMI ;
dcl type ID
type INT
INT int
ID answer
BECOMES =
NUM 1
SEMI ;
dcl type ID
type INT
INT int
ID continueLooping
BECOMES =
NUM 1
SEMI ;
statements statements statement
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE
IF if
LPAREN (
test expr LE expr
expr term
term factor
factor ID
ID n
LE <=
expr term
term factor
factor NUM
NUM 3
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID continueLooping
BECOMES =
expr term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr NE expr
expr term
term factor
factor ID
ID continueLooping
NE !=
expr term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE
IF if
LPAREN (
test expr EQ expr
expr term
term term PCT factor
term factor
factor ID
ID n
PCT %
factor ID
ID i
EQ ==
expr term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID answer
BECOMES =
expr term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
statement lvalue BECOMES expr SEMI
lvalue ID
ID i
BECOMES =
expr expr PLUS term
expr term
term factor
factor ID
ID i
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GT expr
expr term
term term STAR factor
term factor
factor ID
ID i
STAR *
factor ID
ID i
GT >
expr term
term factor
factor ID
ID n
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID continueLooping
BECOMES =
expr term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE
IF if
LPAREN (
test expr EQ expr
expr term
term factor
factor ID
ID answer
EQ ==
expr term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID continueLooping
BECOMES =
expr term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
RBRACE }
RBRACE }
RETURN return
expr term
term factor
factor ID
ID answer
SEMI ;
RBRACE }
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID collatz
LPAREN (
params paramlist
paramlist dcl
dcl type ID
type INT STAR
INT int
STAR *
ID num
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID value
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID value
BECOMES =
expr term
term factor
factor STAR factor
STAR *
factor ID
ID num
SEMI ;
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GE expr
expr term
term factor
factor ID
ID value
GE >=
expr term
term factor
factor NUM
NUM 2
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr NE expr
expr term
term term PCT factor
term factor
factor ID
ID value
PCT %
factor NUM
NUM 2
NE !=
expr term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue STAR factor
STAR *
factor ID
ID num
BECOMES =
expr expr MINUS term
expr expr PLUS term
expr term
term term STAR factor
term factor
factor NUM
NUM 3
STAR *
factor ID
ID value
PLUS +
term factor
factor NUM
NUM 2
MINUS -
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue STAR factor
STAR *
factor ID
ID num
BECOMES =
expr term
term term SLASH factor
term factor
factor ID
ID value
SLASH /
factor NUM
NUM 2
SEMI ;
RBRACE }
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue STAR factor
STAR *
factor ID
ID num
BECOMES =
expr term
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
RETURN return
expr term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT
INT int
ID startNumber
COMMA ,
dcl type ID
type INT
INT int
ID numPrimes
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NULL SEMI
dcls .EMPTY
dcl type ID
type INT STAR
INT int
STAR *
ID result
BECOMES =
NULL NULL
SEMI ;
dcl type ID
type INT
INT int
ID idx
BECOMES =
NUM 0
SEMI ;
dcl type ID
type INT
INT int
ID nextNumber
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID result
BECOMES =
expr term
term factor
factor NEW INT LBRACK expr RBRACK
NEW new
INT int
LBRACK [
expr term
term factor
factor ID
ID numPrimes
RBRACK ]
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID nextNumber
BECOMES =
expr term
term factor
factor ID
ID startNumber
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr LT expr
expr term
term factor
factor ID
ID idx
LT <
expr term
term factor
factor ID
ID numPrimes
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr EQ expr
expr term
term factor
factor ID LPAREN arglist RPAREN
ID isPrime
LPAREN (
arglist expr
expr term
term factor
factor ID
ID nextNumber
RPAREN )
EQ ==
expr term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID nextNumber
BECOMES =
expr expr PLUS term
expr term
term factor
factor ID
ID nextNumber
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
statement lvalue BECOMES expr SEMI
lvalue STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr expr PLUS term
expr term
term factor
factor ID
ID result
PLUS +
term factor
factor ID
ID idx
RPAREN )
BECOMES =
expr term
term factor
factor ID
ID nextNumber
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID nextNumber
BECOMES =
expr expr PLUS term
expr term
term factor
factor ID
ID nextNumber
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID idx
BECOMES =
expr expr PLUS term
expr term
term factor
factor ID
ID idx
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
statement lvalue BECOMES expr SEMI
lvalue ID
ID idx
BECOMES =
expr term
term factor
factor NUM
NUM 0
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr LT expr
expr term
term factor
factor ID
ID idx
LT <
expr term
term factor
factor ID
ID numPrimes
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr term
term factor
factor STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr expr PLUS term
expr term
term factor
factor ID
ID result
PLUS +
term factor
factor ID
ID idx
RPAREN )
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID idx
BECOMES =
expr expr PLUS term
expr term
term factor
factor ID
ID idx
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
statement lvalue BECOMES expr SEMI
lvalue ID
ID nextNumber
BECOMES =
expr term
term factor
factor NUM
NUM 40
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr NE expr
expr term
term factor
factor ID
ID nextNumber
NE !=
expr term
term factor
factor NUM
NUM 1
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr term
term factor
factor ID
ID nextNumber
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID idx
BECOMES =
expr term
term factor
factor ID LPAREN arglist RPAREN
ID collatz
LPAREN (
arglist expr
expr term
term factor
factor AMP lvalue
AMP &
lvalue ID
ID nextNumber
RPAREN )
SEMI ;
RBRACE }
statement DELETE LBRACK RBRACK expr SEMI
DELETE delete
LBRACK [
RBRACK ]
expr term
term factor
factor ID
ID result
SEMI ;
RETURN return
expr term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
