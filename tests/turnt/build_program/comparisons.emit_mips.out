                                ; // Simplified C code:
                                ; int wain(int a, int b) {
                                ;   if (a < b) {
                                ;     println(a);
                                ;   } else {
                                ;   }
                                ;   if (b > a) {
                                ;     println(b);
                                ;   } else {
                                ;   }
                                ;   return a;
                                ; }
                                ; 
.import print
lis $10
.word print
lis $4
.word 4
slt $11, $0, $4                 ; $11 = ($0 < $4) = 1
beq $0, $0, wain                ; Done prologue, jumping to wain
                                ; 
                                ; Generating code for wain
wain:
sw $1, -4($30)                  ;   push $1
sub $30, $30, $4                ;   ^
sw $2, -4($30)                  ;   push $2
sub $30, $30, $4                ;   ^
sub $29, $30, $4
                                ; Code for statements:
lw $3, 8($29)                   ; Loading a
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 4($29)                   ; Loading b
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $5, $3
beq $3, $0, ifelse0
lw $3, 8($29)                   ; Loading a
add $1, $3, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word print
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
beq $0, $0, ifendif0
ifelse0:
ifendif0:
lw $3, 4($29)                   ; Loading b
sw $3, -4($30)                  ;   push $3
sub $30, $30, $4                ;   ^
lw $3, 8($29)                   ; Loading a
add $30, $30, $4                ;   pop $5
lw $5, -4($30)                  ;   ^
slt $3, $3, $5
beq $3, $0, ifelse1
lw $3, 4($29)                   ; Loading b
add $1, $3, $0
sw $31, -4($30)                 ;   push $31
sub $30, $30, $4                ;   ^
lis $5
.word print
jalr $5
add $30, $30, $4                ;   pop $31
lw $31, -4($30)                 ;   ^
beq $0, $0, ifendif1
ifelse1:
ifendif1:
                                ; Code for return value:
lw $3, 8($29)                   ; Loading a
jr $31                          ; Done generating code for wain
                                ; Number of assembly instructions: 50
