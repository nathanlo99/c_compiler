procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT STAR
INT int
STAR *
ID arr
COMMA ,
dcl type ID
type INT
INT int
ID length
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID idx
BECOMES =
NUM 0
SEMI ;
dcl type ID
type INT
INT int
ID sum
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements .EMPTY
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test sum LT sum
sum term
term factor
factor ID
ID idx
LT <
sum term
term factor
factor ID
ID length
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr test
test sum
sum term
term factor
factor STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID arr
PLUS +
term factor
factor ID
ID idx
RPAREN )
RPAREN )
SEMI ;
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID sum
BECOMES =
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID sum
PLUS +
term factor
factor STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID arr
PLUS +
term factor
factor ID
ID idx
RPAREN )
SEMI ;
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID idx
BECOMES =
expr test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID idx
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
RETURN return
expr test
test sum
sum term
term factor
factor ID
ID sum
SEMI ;
RBRACE }
