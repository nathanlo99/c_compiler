procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT
INT int
ID a
COMMA ,
dcl type ID
type INT
INT int
ID b
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID x
BECOMES =
NUM 0
SEMI ;
dcl type ID
type INT
INT int
ID i
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements .EMPTY
statement WHILE LPAREN expr RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test test LT sum
test sum
sum term
term factor
factor ID
ID i
LT <
sum term
term factor
factor NUM
NUM 10
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement IF LPAREN expr RPAREN LBRACE statements RBRACE
IF if
LPAREN (
expr boolor
boolor booland
booland eqtest
eqtest test
test test LT sum
test sum
sum term
term factor
factor ID
ID i
LT <
sum term
term factor
factor NUM
NUM 5
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID x
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID x
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID x
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term term STAR factor
term factor
factor ID
ID x
STAR *
factor NUM
NUM 2
SEMI ;
statement expr SEMI
expr lvalue BECOMES expr
lvalue ID
ID i
BECOMES =
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum sum PLUS term
sum term
term factor
factor ID
ID i
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
RETURN return
expr boolor
boolor booland
booland eqtest
eqtest test
test sum
sum term
term factor
factor ID
ID x
SEMI ;
RBRACE }
